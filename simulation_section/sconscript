## Test model fits against one another - data generated from a survival model

import os

from os.path import join
from nestly.scons import SConsWrap
from nestly import Nest
from SCons.Script import Environment, Command, AddOption
import numpy as np

from matsen_grp_data import SCRATCH_DIR

Import('env')
localenv = env.Clone()

# Set up state
base = {'nreps': localenv['NREPS'],
        'output_name': localenv['OUTPUT_NAME']}

nest = SConsWrap(Nest(base_dict=base), '_'+localenv['OUTPUT_NAME'], alias_environment=localenv)

# Nest for simulation methods
models = [
    {'model': 'shazam'}
    {'model': 'samm', 'motif_lens': '5', 'per_target': False},
    {'model': 'samm', 'motif_lens': '3,5', 'per_target': False},
    {'model': 'samm', 'motif_lens': '3,5', 'per_target': True},
]

nest.add(
    'model',
    models,
    lambda c: [
        "%s_target%s" % (c["motif_lens"].replace(",", "_"), c["per_target"])
    ],
)

nest.add(
    'sparsity_ratio',
    [0.25, 0.5, 1.0],
    label_func=lambda c: "sparsity%d" % int(c * 100),
)

nest.add(
    'effect_size',
    [0.5, 1.0, 2.0],
    label_func=lambda c: "effect_size_%d" % int(c * 100),
)

# Nest for replicates
@nest.add_target_with_env(localenv)
def generate(env, outdir, c):
    cmd = ['python generate_theta.py',
           '--seed',
           0,
           '--motif-len',
           c['model']['motif_lens'],
           '--effect-size',
           c['effect_size'],
           '--sparsity-ratio',
           c['sparsity_ratio'],
           '--output-model ${TARGETS[0]}']
    return env.Command(
        [join(outdir, 'true_model.pkl')],
        [],
        ' '.join(map(str, cmd)))

nest.add(
    'simulation_size',
    [500, 1500, 4500],
    label_func=lambda c: "samples%d" % c['size'],
)

# Nest for replicates
nest.add(
    'replicate',
    range(10),
    label_func='{:02d}'.format)

# Set the seed to be the replicate number.
nest.add(
    'seed',
    lambda c: [c['replicate']],
    create_dir=False)

# Targets for simulating fake data
@nest.add_target_with_env(localenv)
def simulate(env, outdir, c):
    cmd = ['python simulate_from_survival.py',
           '--seed',
           c['seed'],
           '--motif-lens',
           c['motif_params']['motif_lens'],
           '--input-model ${SOURCES[0]}',
           '--n-taxa',
           1,
           '--n-germlines',
           c['simulation_size'],
           '--random-gene-len',
           250,
           '--min-censor-time',
           0.1,
           '--output-file ${TARGETS[0]}',
           '--output-genes ${TARGETS[1]}']
    return env.Command(
        [join(outdir, 'seqs.csv'), join(outdir, 'genes.csv')],
        c['generate'],
        ' '.join(map(str, cmd)))

# Nest for model fitting
# TODO: put this all in one driver function so sources/targets jibe with one another
@nest.add_target_with_env(localenv)
def fit_context_model(env, outdir, c):
    fit_per_target_model = c['model_options'] in model_per_target_options

    # True model should match the estimated model
    if c['per_target_model'] == "is_per_target":
        if c['model_options'] not in model_per_target_options:
            return
    else:
        if c['model_options'] not in model_single_options:
            return

    per_target_model_str = ""
    if fit_per_target_model:
        per_target_model_str = "--per-target-model"

    cmd = []
    if c["model_options"].startswith("survival_"):
        if c["model_options"] == "survival_L5":
            penalty_params = np.power(10, np.arange(-2.0, -7.0, step=-0.25)).tolist()
        elif c["model_options"] == "survival_none5":
            penalty_params = [0]

        cmd = ['python fit_context_model.py',
               '--seed',
               c['seed'],
               '--motif-lens',
               5,
               '--positions-mutating',
               2,
               '--em-max-iters',
               10,
               '--penalty-params',
               ",".join(map(str, penalty_params)),
               '--num-cpu-threads',
               6,
               '--num-jobs',
               20,
               '--burn-in',
               2,
               '--num-e-samples',
               4,
               per_target_model_str,
               '--scratch-directory',
               SCRATCH_DIR,
               '--theta-file ${SOURCES[0]}',
               '--input-seqs ${SOURCES[1]}',
               '--input-genes ${SOURCES[2]}',
               '--out-file ${TARGETS[0]}',
               '--log-file ${TARGETS[1]}']
    elif c["model_options"] == "shazam":
        cmd = ['python fit_shmulate_model.py',
               '--theta-file ${SOURCES[0]}',
               '--input-file ${SOURCES[1]}',
               '--input-genes ${SOURCES[2]}',
               '--model-pkl ${TARGETS[0]}',
               '--log-file ${TARGETS[1]}']
    return env.Command(
        [join(outdir, 'fitted.pkl'), join(outdir, 'log.txt')],
        c['generate'],
        ' '.join(map(str, cmd)))
