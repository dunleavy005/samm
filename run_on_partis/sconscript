## Test model fits against one another

import os
import pickle 
import csv

from os.path import join
from nestly.scons import SConsWrap
from nestly import Nest
from SCons.Script import Environment, Command, AddOption
from random import randint
from matsen_grp_data import CUI_DATA_PATH

MOTIF_LEN = 5

Import('env')
localenv = env.Clone()

# Set up state
base = {'output_name': localenv['OUTPUT_NAME']}

nest = SConsWrap(Nest(base_dict=base), '_'+localenv['OUTPUT_NAME'], alias_environment=localenv)

# Nest for datasets
nest.add(
    'datasets',
    ['cui'])

# TODO: eventually add jason-mg data, once processed
nest.add(
    'data_path',
    [CUI_DATA_PATH],
    create_dir=False)

# Chains and classes
nest.add(
    'chain',
    ['k', 'l']) # no heavy chain in cui data

nest.add(
    'igclass',
    lambda c: 'G' if c['chain'] == 'h' else c['chain'].upper(),
    create_dir=False)

# Nest for processing data
@nest.add_target_with_env(localenv)
def process_data(env, outdir, c):
    cmd = ['python preprocess_data.py',
               '--data-path',
               c['data_path'],
               '--chain',
               c['chain'],
               '--motif-len',
               MOTIF_LEN,
               '--read-from-partis',
               '--impute-ancestors',
               '--output-genes ${TARGETS[0]}',
               '--output-seqs ${TARGETS[1]}']

    return env.Command(
        [join(outdir, 'processed_genes.csv'), join(outdir, 'processed_seqs.csv')],
        [],
        ' '.join(map(str, cmd)))

nest.add(
    'replicate',
    range(localenv['NREPS']),
    label_func='{:02d}'.format)

# Set the seed to be the replicate number.
nest.add(
    'seed',
    lambda c: [c['replicate']],
    create_dir=False)

# Targets
nest.add(
    'model_options',
    ['survival_FL'])

# fused lasso seems to take smaller penalties
nest.add(
    'penalty_param',
    lambda c: [".01,.005,.001,.0005,.0001" if c['model_options'] == 'survival_L' else "0.001,0.0001,0.00001"],
    create_dir=False)


# Nest for model fitting
@nest.add_target_with_env(localenv)
def fit_models(env, outdir, c):
    cmd = []
    if c["model_options"].startswith("survival"):
        cmd = ['python fit_context_model.py',
               '--input-genes ${SOURCES[0]}',
               '--input-seqs ${SOURCES[1]}',
               '--seed',
               c['seed'],
               '--motif-len',
               MOTIF_LEN,
               '--solver',
               c['model_options'].replace('survival_', ''),
               '--penalty-params',
               c['penalty_param'],
               '--num-cpu-threads',
               10,
               '--num-jobs',
               40,
               '--burn-in',
               2,
               '--num-e-samples',
               4,
               '--em-max-iters',
               1,
               '--out-file ${TARGETS[0]}',
               '--log-file ${TARGETS[1]}']
    elif c["model_options"] == "basic":
        cmd = ['python fit_basic_model.py',
               '--input-genes ${SOURCES[0]}',
               '--input-seqs ${SOURCES[1]}',
               '--seed',
               c['seed'],
               '--motif-len',
               MOTIF_LEN,
               '--out-file ${TARGETS[0]}',
               '--log-file ${TARGETS[1]}']
    return env.Command(
        [join(outdir, 'fitted.pkl'), join(outdir, 'log.txt')],
        c['process_data'],
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def summarize(env, outdir, c):
    def theta_stats(target, source, env):
        c = env['control']
        output_results = ['chain', 'penalty-param', 'num-nonzero', 'log-lik']
        with open(str(source[0]), 'r') as pickle_file:
            results_list = pickle.load(pickle_file)

        if c["model_options"].startswith("survival"):
            with open(str(target[0]), 'w') as cross_val_file:
                writer = csv.writer(cross_val_file, delimiter=',')
                writer.writerow('chain penalty-param log-lik num-nonzero'.split())
                for result in results_list:
                    writer.writerow([c['chain'], result[0], result[3], result[4]])

    return env.Command(
        join(outdir, 'cross_val_results.csv'),
        c['fit_models'],
        theta_stats,
        control=c)

