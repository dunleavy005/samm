## Test model fits against one another

import os
import pickle
import csv
import numpy as np

from os.path import join
from nestly.scons import SConsWrap
from nestly import Nest
from SCons.Script import Environment, Command, AddOption
from random import randint
from matsen_grp_data import CUI_DATA_PATH
from matsen_grp_data import SCRATCH_DIR

Import('env')
localenv = env.Clone()

# Set up state
base = {'output_name': localenv['OUTPUT_NAME']}

nest = SConsWrap(Nest(base_dict=base), '_'+localenv['OUTPUT_NAME'], alias_environment=localenv)

SCRATCH_DIRECTORY = '/fh/fast/matsen_e/dshaw/_tmp/samm'

# Nest for datasets
nest.add(
    'datasets',
    ['cui'])

# TODO: eventually add jason-mg data, once processed
nest.add(
    'data_path',
    [CUI_DATA_PATH],
    create_dir=False)

nest.add(
    'sample_or_impute',
    [
        'sample',
        #'impute'
    ])

# Nest for processing data
@nest.add_target_with_env(localenv)
def process_data(env, outdir, c):
    cmd = ['python preprocess_data.py',
               '--data-path',
               c['data_path'],
               '--motif-len',
               5,
               '--read-from-partis',
               '--metadata-path',
               c['data_path'] + '/meta.csv',
               '--output-genes ${TARGETS[0]}',
               '--output-seqs ${TARGETS[1]}']
    if c['sample_or_impute'] == 'impute':
        cmd += ['--impute-ancestors']

    return env.Command(
        [join(outdir, 'processed_genes.csv'), join(outdir, 'processed_seqs.csv')],
        [],
        ' '.join(map(str, cmd)))

# Loci
# ! no heavy chain in cui data
nest.add(
    'locus',
    [
        'igk',
        #'igl'
    ])

nest.add(
    'replicate',
    range(localenv['NREPS']),
    label_func='{:02d}'.format)

# Set the seed to be the replicate number.
nest.add(
    'seed',
    lambda c: [c['replicate']],
    create_dir=False)

# Targets
nest.add(
    'model_options',
    [
        #'survival_L',
        'shmulate'
    ])

nest.add(
    'motif_length',
    [5, ",".join(map(str, [3,5,7]))],
    label_func='{0}mers'.format
)


#
nest.add(
    'per_target',
    [
         False,
         True
    ]
)

nest.add(
    'validation_methods',
    [
        #'none',
        'subject',
        #'clonal_family'
    ])

# Nest for deciding parameter ranges
@nest.add_target_with_env(localenv)
def tune_parameters(env, outdir, c):
    cmd = []
    if c["model_options"].startswith("survival"):
        solver = 'L'
        penalty_params = ",".join(map(str, np.power(10, np.arange(-4.0, -7.0, step=-0.5)).tolist()))

        cmd = ['python fit_context_model.py',
               '--input-genes ${SOURCES[0]}',
               '--input-seqs ${SOURCES[1]}',
               '--locus',
               c['locus'],
               '--species',
               'mouse',
               '--seed',
               c['seed'],
               '--motif-len',
               c['motif_length'],
               '--solver',
               solver,
               '--penalty-params',
               penalty_params,
               '--num-cpu-threads',
               10,
               '--num-jobs',
               40,
               '--burn-in',
               2,
               '--num-e-samples',
               4,
               '--em-max-iters',
               10,
               '--scratch-directory',
               SCRATCH_DIR,
               '--tuning-sample-ratio',
               0.1,
               '--out-file ${TARGETS[0]}',
               '--log-file ${TARGETS[1]}']
        if c['validation_methods'] is not 'none':
            cmd += [
               '--validation-column',
               c['validation_methods']]
        if c['sample_or_impute'] == 'sample':
            cmd += ['--sample-regime', 2]
        if c["per_target"]:
            cmd += ['--per-target-model']
    elif c["model_options"] == "shmulate" and not c["per_target"] and c['motif_length'] == 5:
        cmd = ['python fit_shmulate_model.py',
               '--input-file ${SOURCES[0]}',
               '--input-genes ${SOURCES[1]}',
               '--model-pkl ${TARGETS[0]}',
               '--log-file ${TARGETS[1]}']
    return env.Command(
        [join(outdir, 'fitted.pkl'), join(outdir, 'log.txt')],
        c['process_data'],
        ' '.join(map(str, cmd)))

#@nest.add_target_with_env(localenv)
#def summarize(env, outdir, c):
#    def theta_stats(target, source, env):
#        c = env['control']
#        output_results = ['chain', 'penalty-param', 'num-nonzero', 'log-lik']
#        with open(str(source[0]), 'r') as pickle_file:
#            results_list = pickle.load(pickle_file)
#
#        if c["model_options"].startswith("survival"):
#            with open(str(target[0]), 'w') as cross_val_file:
#                writer = csv.writer(cross_val_file, delimiter=',')
#                writer.writerow('locus model validation penalty-param log-lik num-nonzero'.split())
#                for result in results_list:
#                    num_nonzero = np.sum(result.theta > 1e-6)
#                    writer.writerow([c['locus'], c['model_options'], c['validation_methods'], results.penalty_params, results., num_nonzero])
#
#    return env.Command(
#        join(outdir, 'cross_val_results.csv'),
#        c['tune_parameters'],
#        theta_stats,
#        control=c)

# Nest for fitting on all data
# ...
