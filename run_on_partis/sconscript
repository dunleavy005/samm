## Test model fits against one another

import os

from os.path import join
from nestly.scons import SConsWrap
from nestly import Nest
from SCons.Script import Environment, Command, AddOption
from random import randint
from matsen_grp_data import *

Import('env')
localenv = env.Clone()

# Set up state
base = {'output_name': localenv['OUTPUT_NAME']}

nest = SConsWrap(Nest(base_dict=base), '_'+localenv['OUTPUT_NAME'], alias_environment=localenv)

# Nest for datasets
nest.add(
    'datasets',
    ['laura', 'kate'])

nest.add(
    'data_path',
    lambda c: [LAURA_DATA_PATH if c['datasets'] == 'laura' else KATE_DATA_PATH],
    create_dir=False)

# Chains and classes
nest.add(
    'chain',
    ['h', 'k', 'l'])

nest.add(
    'igclass',
    lambda c: 'G' if c['chain'] == 'h' else c['chain'].upper(),
    create_dir=False)

# Targets
nest.add(
    'model_options',
    ['basic'])

# Nest for model fitting
@nest.add_target_with_env(localenv)
def fit_models(env, outdir, c):
    cmd = []
    if c["model_options"] == "survival":
        cmd = ['python fit_context_model.py',
               '--seed',
               randint(1000, 9999),
               '--motif-len',
               5,
               '--penalty-params',
               "0.01,0.001,0.0001",
               '--num-cpu-threads',
               10,
               '--num-jobs',
               20,
               '--burn-in',
               2,
               '--num-e-samples',
               4,
               '--use-partis',
               '--input-partis',
               c['data_path'],
               '--chain',
               c['chain'],
               '--igclass',
               c['igclass'],
               '--out-file ${TARGETS[0]}',
               '--log-file ${TARGETS[1]}']
    elif c["model_options"] == "basic":
        cmd = ['python fit_basic_model.py',
               '--seed',
               randint(1000, 9999),
               '--motif-len',
               5,
               '--use-partis',
               '--input-partis',
               c['data_path'],
               '--chain',
               c['chain'],
               '--igclass',
               c['igclass'],
               '--prop-file ${TARGETS[0]}',
               '--log-file ${TARGETS[1]}']
    return env.Command(
        [join(outdir, 'fitted.pkl'), join(outdir, 'log.txt')],
        [],
        ' '.join(map(str, cmd)))

