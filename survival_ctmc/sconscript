## Test if survival model can reconstruct CTMC

import os
from os.path import join
from nestly.scons import SConsWrap
from nestly import Nest

Import('env')
localenv = env.Clone()

# Set up state
base = {'nreps': localenv['NREPS'],
        'output_name': localenv['OUTPUT_NAME']}

nest = SConsWrap(Nest(base_dict=base), '_'+localenv['OUTPUT_NAME'], alias_environment=localenv)

# Nest for replicates

nest.add(
    'replicate',
    range(localenv['NREPS']),
    label_func='{:02d}'.format)

# Set the seed to be the replicate number.
nest.add(
    'seed',
    lambda c: [c['replicate']],
    create_dir=False)

# Targets for simulating fake data

@nest.add_target_with_env(localenv)
def generate(env, outdir, c):
    cmd = ['python simulate_from_survival.py',
           '--seed',
           c['seed'],
           '--n-taxa',
           10,
           '--n-germlines',
           100,
           '--motif-len',
           5,
           '--random-gene-len',
           200,
           '--min-censor-time',
           0.1,
           '--ratio-nonzero',
           0.1,
           '--with-replacement',
           '--output-true-theta ${TARGETS[0]}',
           '--output-file ${TARGETS[1]}',
           '--output-genes ${TARGETS[2]}']
    return env.Command(
        [join(outdir, 'true_theta.pkl'), join(outdir, 'seqs.csv'), join(outdir, 'genes.csv')],
        [],
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def fit_context_model(env, outdir, c):
    cmd = ['python fit_context_model.py',
           '--seed',
           c['seed'],
           '--motif-len',
           5,
           '--penalty-params',
           "0.01,0.001,0.0001",
           '--num-cpu-threads',
           10,
           '--num-jobs',
           20,
           '--burn-in',
           2,
           '--num-e-samples',
           4,
           '--theta-file ${SOURCES[0]}',
           '--input-file ${SOURCES[1]}',
           '--input-genes ${SOURCES[2]}',
           '--out-file ${TARGETS[0]}',
           '--intermediate-out-file ${TARGETS[1]}',
           '--log-file ${TARGETS[2]}']
    return env.Command(
        [join(outdir, 'fitted.pkl'), join(outdir, 'fitted_intermed.pkl'), join(outdir, 'log.txt')],
        c['generate'],
        ' '.join(map(str, cmd)))

