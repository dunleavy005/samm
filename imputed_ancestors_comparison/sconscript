## Test model fits against one another

import os

from os.path import join
from nestly.scons import SConsWrap
from nestly import Nest
from SCons.Script import Environment, Command, AddOption
from matsen_grp_data import SCRATCH_DIR

Import('env')
localenv = env.Clone()

# Set up state
base = {'nreps': localenv['NREPS'],
        'output_name': localenv['OUTPUT_NAME']}

nest = SConsWrap(Nest(base_dict=base), '_'+localenv['OUTPUT_NAME'], alias_environment=localenv)

sim_size_dict = [
    #{'size': 'mini', 'n_taxa': 5, 'n_germlines': 50, 'germline_size': 50},
    {'size': 'big', 'n_taxa': 10, 'n_germlines': 100, 'germline_size': 200},
]

nest.add(
    'simulation_size',
    sim_size_dict,
    label_func=lambda c: c['size'])

nest.add(
    'motif_length',
    [
        #3,
        5,
    ],
    label_func='{:02d}mers'.format)

# Nest for replicates
nest.add(
    'replicate',
    range(localenv['NREPS']),
    label_func='{:02d}'.format)

# Set the seed to be the replicate number.
nest.add(
    'seed',
    lambda c: [c['replicate']],
    create_dir=False)

# Targets for simulating fake data
@nest.add_target_with_env(localenv)
def generate(env, outdir, c):
    cmd = ['python simulate_from_sampled_gls.py simulate'] + ['--seed',
                c['seed'],
                '--n-taxa',
                c['simulation_size']['n_taxa'],
                '--n-germlines',
                c['simulation_size']['n_germlines'],
                '--output-true-theta ${TARGETS[0]}',
                '--output-genes ${TARGETS[1]}',
                '--output-seqs ${TARGETS[2]}',
                '--output-per-branch-genes ${TARGETS[3]}',
                '--output-per-branch-seqs ${TARGETS[4]}',
                '&&',
                'python preprocess_data.py',
                '--input-genes ${TARGETS[1]}',
                '--input-seqs ${TARGETS[2]}',
                '--motif-len',
                c['motif_length'],
                '--impute-ancestors',
                '--scratch-directory',
                SCRATCH_DIR,
                '--output-genes ${TARGETS[5]}',
                '--output-seqs ${TARGETS[6]}']

    return env.Command(
        [join(outdir, 'true_theta.pkl'), join(outdir, 'genes.csv'), join(outdir, 'seqs.csv'),
         join(outdir, 'genes_with_ancestors.csv'), join(outdir, 'seqs_with_ancestors.csv'),
         join(outdir, 'genes_with_imputed_ancestors.csv'), join(outdir, 'seqs_with_imputed_ancestors.csv')],
        [],
        ' '.join(map(str, cmd)))

# Targets
nest.add(
    'model_options',
    [
        'survival_ref',
    ])

data_dict = [
    {'data_type': 'true_ancestors',
     'sampling_option': 1,
     'sources': [3,4]},
    {'data_type': 'imputed_ancestors',
     'sampling_option': 1,
     'sources': [5,6]},
    {'data_type': 'all_data',
     'sampling_option': 1,
     'sources': [1,2]},
    {'data_type': 'sample_random',
     'sampling_option': 2,
     'sources': [1,2]},
    {'data_type': 'sample_highly_mutated',
     'sampling_option': 3,
     'sources': [1,2]},
]

nest.add(
    'data_type',
    data_dict,
    label_func=lambda c: c['data_type'])

@nest.add_target_with_env(localenv)
def fit_context_model(env, outdir, c):
    # no penalty
    solver = 'L'
    windows = ""
    penalty_params = '0'

    data_cmd = ['--input-genes ${SOURCES[{}]} --input-seqs ${SOURCES[{}]}'.format(c['data_type']['sources'])]
    cmd = ['python fit_context_model.py',
           '--seed',
           c['seed'],
           '--motif-len',
           c['motif_length'],
           '--solver',
           solver,
           '--penalty-params',
           penalty_params,
           '--num-cpu-threads',
           4,
           '--num-jobs',
           40,
           '--burn-in',
           2,
           '--num-e-samples',
           2,
           '--em-max-iters',
           1,
           '--scratch-directory',
           SCRATCH_DIR,
           '--theta-file ${SOURCES[0]}',
           '--out-file ${TARGETS[0]}',
           '--intermediate-out-file ${TARGETS[1]}',
           '--log-file ${TARGETS[2]}',
           '--sample-regime',
           c['data_type']['sampling_option']]

    return env.Command(
        [join(outdir, 'fitted.pkl'), join(outdir, 'fitted_intermed.pkl'), join(outdir, 'log.txt')],
        c['generate'],
        ' '.join(map(str, cmd)))

