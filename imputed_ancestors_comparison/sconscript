## Test model fits against one another

import os

from os.path import join
from nestly.scons import SConsWrap
from nestly import Nest
from SCons.Script import Environment, Command, AddOption

Import('env')
localenv = env.Clone()

# Set up state
base = {'nreps': localenv['NREPS'],
        'output_name': localenv['OUTPUT_NAME']}

nest = SConsWrap(Nest(base_dict=base), '_'+localenv['OUTPUT_NAME'], alias_environment=localenv)

sim_size_dict = [{'size': 'mini', 'n_taxa': 5, 'n_germlines': 50, 'germline_size': 50},
                 {'size': 'big', 'n_taxa': 10, 'n_germlines': 100, 'germline_size': 200}]

nest.add(
    'simulation_size',
    sim_size_dict,
    label_func=lambda c: c['size'])

# Nest for replicates
nest.add(
    'replicate',
    range(localenv['NREPS']),
    label_func='{:02d}'.format)

# Set the seed to be the replicate number.
nest.add(
    'seed',
    lambda c: [c['replicate']],
    create_dir=False)

nest.add(
    'generate_ancestors',
    ['no_ancestors', 'ancestors'])

# Targets for simulating fake data
@nest.add_target_with_env(localenv)
def generate(env, outdir, c):
    cmd = ['python simulate_from_sampled_gls.py simulate'] + ['--seed',
                c['seed'],
                '--n-taxa',
                c['simulation_size']['n_taxa'],
                '--n-germlines',
                c['simulation_size']['n_germlines'],
                '--output-true-theta ${TARGETS[0]}',
                '--output-file ${TARGETS[1]}',
                '--output-genes ${TARGETS[2]}']
    if c['generate_ancestors'] == 'ancestors':
        cmd += ['--output-ancestors']

    return env.Command(
        [join(outdir, 'true_theta.pkl'), join(outdir, 'seqs.csv'), join(outdir, 'genes.csv')],
        [],
        ' '.join(map(str, cmd)))

# Nest for fitting models
model_options = [
    'basic',
    'survival',
]

nest.add(
    'model_options',
    model_options)

nest.add(
    'model_call',
    lambda c: ['python fit_basic_model.py' if c['model_options']=='basic' else 'python fit_context_model.py'],
    create_dir=False)

nest.add(
    'model_extra_options',
    lambda c: ['' if c['model_options']=='basic' else \
        '--penalty-params "0.01,0.001,0.0001" --num-cpu-threads 1 --num-jobs 20 --burn-in 2 --num-e-samples 4'],
    create_dir=False)

data_options = [
    'true_ancestors',
    'all_data',
    'sample_one',
    'impute_ancestors'
]

nest.add(
    'data_options',
    data_options)

# Nest for model fitting
@nest.add_target_with_env(localenv)
def fit_model(env, outdir, c):
    cmd = []
    if c['data_options'] == 'true_ancestors' and c['generate_ancestors'] == 'ancestors':
        cmd = [c['model_call']] + ['--seed',
               c['seed'],
               '--motif-len',
               5,
               '--theta-file ${SOURCES[0]}',
               '--input-file ${SOURCES[1]}',
               '--input-genes ${SOURCES[2]}',
               '--out-file ${TARGETS[0]}',
               '--log-file ${TARGETS[1]}'] + [c['model_extra_options']]
    elif c['data_options'] != 'true_ancestors' and c['generate_ancestors'] != 'ancestors':
        cmd = [c['model_call']] + ['--seed',
               c['seed'],
               '--motif-len',
               5,
               '--theta-file ${SOURCES[0]}',
               '--input-file ${SOURCES[1]}',
               '--input-genes ${SOURCES[2]}',
               '--out-file ${TARGETS[0]}',
               '--log-file ${TARGETS[1]}'] + [c['model_extra_options']]
        if c['data_options'] == 'sample_one':
            cmd += ['--sample-seq']
        if c['data_options'] == 'impute_ancestors':
            cmd += ['--impute-ancestors']
    return env.Command(
        [join(outdir, 'fitted.pkl'), join(outdir, 'log.txt')],
        c['generate'],
        ' '.join(map(str, cmd)))

