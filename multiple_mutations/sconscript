## Test if survival model deal with positions mutating multiple times
import os
from os.path import join
from nestly.scons import SConsWrap
from nestly import Nest
import numpy as np

Import('env')
localenv = env.Clone()

# Set up state
base = {'output_name': localenv['OUTPUT_NAME']}

nest = SConsWrap(Nest(base_dict=base), '_'+localenv['OUTPUT_NAME'], alias_environment=localenv)

SCRATCH_DIR = '/fh/fast/matsen_e/dshaw/_tmp/samm'
SPARSITY_RATIO = 0.5

# Nest for replicates
nest.add(
    'replicate',
    range(10),
    label_func='{:02d}'.format)

# Set the seed to be the replicate number.
nest.add(
    'seed',
    lambda c: [c['replicate']],
    create_dir=False)

# simulate data
@nest.add_target_with_env(localenv)
def generate(env, outdir, c):
    cmd = ['python generate_theta.py',
            '--mutability R/shmulate_params/mutability.csv',
            '--substitution R/shmulate_params/substitution.csv',
            '--seed',
            c['seed'],
            '--motif-lens',
            3,
            '--positions-mutating',
            1,
            '--sparsity-ratio',
            SPARSITY_RATIO,
            '--output-model ${TARGETS[0]}',
    ]
    return env.Command(
        [join(outdir, 'true_model.pkl')],
        [],
        ' '.join(map(str, cmd)))

nest.add(
    'replace',
    [True, False],
)

@nest.add_target_with_env(localenv)
def simulate(env, outdir, c):
    replacement_flag = '--with-replacement' if c["replace"] else ''

    cmd = ['python simulate_from_survival.py',
            '--seed',
            c['seed'],
            '--agg-motif-len',
            3,
            '--input-model ${SOURCES[0]}',
            '--n-taxa',
            10,
            '--min-percent-mutated',
            0.05,
            '--max-percent-mutated',
            0.15,
            '--output-file ${TARGETS[0]}',
            '--output-genes ${TARGETS[1]}',
            '--use-partis',
            replacement_flag,
        ]

    return env.Command(
        [join(outdir, 'seqs.csv'), join(outdir, 'genes.csv')],
        c['generate'],
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def fit_survival(env, outdir, c):
    penalty_params = ",".join(map(str, np.power(10, np.arange(-1.0, -7.0, step=-.5)).tolist()))

    cmd = ['python fit_context_model.py',
        '--input-genes ${SOURCES[1]}',
        '--input-seqs ${SOURCES[0]}',
        '--seed',
        c['seed'],
        '--motif-lens',
        3,
        '--positions-mutating',
        1,
        '--penalty-params',
        penalty_params,
        '--sample-regime',
        1, # use all the sequences since we generate from star tree (and we dont rename germlines)
        '--num-cpu-threads',
        1,
        '--num-jobs',
        5,
        '--burn-in',
        2,
        '--num-e-samples',
        4,
        '--em-max-iters',
        5,
        '--num-val-burnin',
        2,
        '--num-val-samples',
        4,
        '--scratch-directory',
        SCRATCH_DIR,
        '--tuning-sample-ratio',
        0.1,
        '--out-file ${TARGETS[0]}',
        '--log-file ${TARGETS[1]}',
        '--omit-hessian',
    ]

    return env.Command(
        [join(outdir, 'fitted.pkl'), join(outdir, 'log.txt')],
        c['simulate'],
        ' '.join(map(str, cmd)))
