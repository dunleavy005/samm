## Test model fits against one another

Import('env')
localenv = env.Clone()

# Set up state
base = {'nreps': localenv['NREPS'],
        'output_name': localenv['OUTPUT_NAME']}

nest = SConsWrap(Nest(base_dict=base), '_'+localenv['OUTPUT_NAME'], alias_environment=localenv)

# Nest for simulation methods
sim_methods = [
    'survival_big',
    'survival_mini',
    'shmulate',
]

nest.add(
    'simulation_methods',
    sim_methods)

# Nest for replicates

nest.add(
    'replicate',
    range(localenv['NREPS']),
    label_func='{:02d}'.format)

# Set the seed to be the replicate number.
nest.add(
    'seed',
    lambda c: [c['replicate']],
    create_dir=False)

# Targets for simulating fake data
# TODO: put this all in one driver function so sources/targets jibe with one another
@nest.add_target_with_env(localenv)
def generate(env, outdir, c):
    if c['simulation_methods'] == "shmulate":
        cmd = ['python simulate_from_sampled_gls.py',
               'simulate',
               '--seed',
               c['seed'],
               '--n-taxa',
               5,
               '--n-germlines',
               50,
               '--output-true-theta ${TARGETS[0]}',
               '--output-file ${TARGETS[1]}',
               '--output-genes ${TARGETS[2]}']
    elif c['simulation_methods'] == "survival_mini":
        cmd = ['python simulate_from_survival.py',
               '--seed',
               c['seed'],
               '--n-taxa',
               5,
               '--n-germlines',
               50,
               '--motif-len',
               5,
               '--random-gene-len',
               50,
               '--min-censor-time',
               0.2,
               '--ratio-nonzero',
               0.2,
               '--output-true-theta ${TARGETS[0]}',
               '--output-file ${TARGETS[1]}',
               '--output-genes ${TARGETS[2]}']
    elif c['simulation_methods'] == "survival_big":
        cmd = ['python simulate_from_survival.py',
               '--seed',
               c['seed'],
               '--n-taxa',
               10,
               '--n-germlines',
               100,
               '--motif-len',
               5,
               '--random-gene-len',
               200,
               '--min-censor-time',
               0.1,
               '--ratio-nonzero',
               0.1,
               '--output-true-theta ${TARGETS[0]}',
               '--output-file ${TARGETS[1]}',
               '--output-genes ${TARGETS[2]}']
    return env.Command(
        [join(outdir, 'true_theta.pkl'), join(outdir, 'seqs.csv'), join(outdir, 'genes.csv')],
        [],
        ' '.join(map(str, cmd)))

# Nest for fitting models
model_options = [
    'survival',
    'basic',
    'shmulate'
]

nest.add(
    'model_options',
    model_options)

# Nest for model fitting
# TODO: put this all in one driver function so sources/targets jibe with one another
@nest.add_target_with_env(localenv)
def fit_context_model(env, outdir, c):
    cmd = []
    if c["model_options"] == "survival":
        cmd = ['python fit_context_model.py',
               '--seed',
               c['seed'],
               '--motif-len',
               5,
               '--penalty-params',
               "0.01,0.001,0.0001",
               '--num-threads',
               10,
               '--burn-in',
               2,
               '--num-e-samples',
               4,
               '--theta-file ${SOURCES[0]}',
               '--input-file ${SOURCES[1]}',
               '--input-genes ${SOURCES[2]}',
               '--out-file ${TARGETS[0]}',
               '--log-file ${TARGETS[1]}']
    elif c["model_options"] == "shmulate":
        cmd = ['python fit_shmulate_model.py',
               '--theta-file ${SOURCES[0]}',
               '--input-file ${SOURCES[1]}',
               '--input-genes ${SOURCES[2]}',
               '--model-pkl ${TARGETS[0]}',
               '--log-file ${TARGETS[1]}']
    elif c["model_options"] == "basic":
        cmd = ['python fit_basic_model.py',
               '--seed',
               c['seed'],
               '--motif-len',
               5,
               '--theta-file ${SOURCES[0]}',
               '--input-file ${SOURCES[1]}',
               '--input-genes ${SOURCES[2]}',
               '--prop-file ${TARGETS[0]}',
               '--log-file ${TARGETS[1]}']
    return env.Command(
        [join(outdir, 'fitted.pkl'), join(outdir, 'log.txt')],
        c['generate'],
        ' '.join(map(str, cmd)))

# Aggregate over different fitting methods

# Aggregate over all replicates

# Plot results
