## Test model fits against one another

import os
import pickle
import csv
import numpy as np

from os.path import join
from nestly.scons import SConsWrap
from nestly import Nest
from SCons.Script import Environment, Command, AddOption
from random import randint
from matsen_grp_data import CUI_DATA_PATH
from matsen_grp_data import SCRATCH_DIR

Import('env')
localenv = env.Clone()

# Set up state
base = {'output_name': localenv['OUTPUT_NAME']}

nest = SConsWrap(Nest(base_dict=base), '_'+localenv['OUTPUT_NAME'], alias_environment=localenv)

SCRATCH_DIRECTORY = '/fh/fast/matsen_e/dshaw/_tmp/samm'
SPARSITY_RATIO = 1.0

models = [
    {'simulation': 'survival', 'motif_lens': [3,5], 'positions_mutating': "1:2"},
    #{'simulation': 'shmulate', 'motif_lens': [3,5], 'positions_mutating': "1:2"},
]

nest.add(
    'model',
    models,
    label_func=lambda c: c["simulation"],
)

nest.add(
    'replicate',
    range(0,2),
    label_func='{:02d}'.format)

# Set the seed to be the replicate number.
nest.add(
    'seed',
    lambda c: [c['replicate']],
    create_dir=False)

# simulate data
@nest.add_target_with_env(localenv)
def generate(env, outdir, c):
    shmulate_flag = "" if c["model"]["simulation"] == 'survival' else "--use-shmulate"
    cmd = ['python generate_theta.py',
            '--mutability R/shmulate_params/mutability.csv',
            '--substitution R/shmulate_params/substitution.csv',
            '--seed',
            c['seed'],
            '--motif-lens',
            ",".join([str(m) for m in c['model']['motif_lens']]),
            '--positions-mutating',
            c["model"]["positions_mutating"],
            '--sparsity-ratio',
            SPARSITY_RATIO,
            '--per-target-model',
            shmulate_flag,
            '--output-model ${TARGETS[0]}',
    ]
    return env.Command(
        [join(outdir, 'true_model.pkl')],
        [],
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def simulate(env, outdir, c):
    shmulate_flag = "" if c["model"]["simulation"] == 'survival' else "--use-shmulate"

    cmd = ['python simulate_from_survival.py',
            '--seed',
            c['seed'],
            '--agg-motif-len',
            max(c['model']['motif_lens']),
            '--input-model ${SOURCES[0]}',
            '--n-taxa',
            40,
            '--min-percent-mutated',
            0.05,
            '--max-percent-mutated',
            0.15,
            '--output-file ${TARGETS[0]}',
            '--output-genes ${TARGETS[1]}',
            shmulate_flag,
            '--use-partis',
        ]

    return env.Command(
        [join(outdir, 'seqs.csv'), join(outdir, 'genes.csv')],
        c['generate'],
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def fit_survival(env, outdir, c):
    motif_lens = c['model']['motif_lens']
    left_flanks = c['model']['positions_mutating']
    penalty_params = ",".join(map(str, np.power(10, np.arange(-2.0, -7.0, step=-.5)).tolist()))

    cmd = ['python fit_context_model.py',
        '--input-genes ${SOURCES[1]}',
        '--input-seqs ${SOURCES[0]}',
        '--seed',
        c['seed'],
        '--motif-lens',
        ",".join([str(m) for m in motif_lens]),
        '--positions-mutating',
        left_flanks,
        '--penalty-params',
        penalty_params,
        '--sample-regime',
        1, # use all the sequences since we generate from star tree (and we dont rename germlines)
        '--num-cpu-threads',
        4,
        '--num-jobs',
        20,
        '--burn-in',
        2,
        '--num-e-samples',
        4,
        '--em-max-iters',
        10,
        '--num-val-burnin',
        2,
        '--num-val-samples',
        4,
        '--scratch-directory',
        SCRATCH_DIR,
        '--tuning-sample-ratio',
        0.1,
        '--out-file ${TARGETS[0]}',
        '--log-file ${TARGETS[1]}',
        '--per-target-model',
    ]

    return env.Command(
        [join(outdir, 'fitted.pkl'), join(outdir, 'log.txt')],
        c['simulate'],
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def fit_shazam(env, outdir, c):

    cmd = ['python fit_shmulate_model.py',
           '--input-file',
           '${SOURCES[0]}',
           '--input-genes',
           '${SOURCES[1]}',
           '--model-pkl ${TARGETS[0]}',
           '--log-file ${TARGETS[1]}']

    return env.Command(
        [join(outdir, 'fitted_shazam.pkl'), join(outdir, 'log_shazam.txt')],
        c['simulate'],
        ' '.join(map(str, cmd)))
